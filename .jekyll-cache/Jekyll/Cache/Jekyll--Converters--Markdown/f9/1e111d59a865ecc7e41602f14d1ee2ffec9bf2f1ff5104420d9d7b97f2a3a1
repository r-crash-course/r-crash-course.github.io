I"G7<p>Most of R’s functions are vectorized, meaning that the function will
operate on all elements of a vector without needing to loop through
and act on each element one at a time. This makes writing code more
concise, easy to read, and less error prone.</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x &lt;- 1:4
x * 2
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 2 4 6 8
</code></pre></div></div>

<p>The multiplication happened to each element of the vector.</p>

<p>We can also add two vectors together:</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y &lt;- 6:9
x + y
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1]  7  9 11 13
</code></pre></div></div>

<p>Each element of <code class="language-plaintext highlighter-rouge">x</code> was added to its corresponding element of <code class="language-plaintext highlighter-rouge">y</code>:</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x:  1  2  3  4
    +  +  +  +
y:  6  7  8  9
---------------
    7  9 11 13
</code></pre></div></div>

<blockquote class="challenge">
  <h2 id="challenge-1">Challenge 1</h2>

  <p>Let’s try this on the <code class="language-plaintext highlighter-rouge">pop</code> column of the <code class="language-plaintext highlighter-rouge">gapminder</code> dataset.</p>

  <p>Make a new column in the <code class="language-plaintext highlighter-rouge">gapminder</code> data frame that
contains population in units of millions of people.
Check the head or tail of the data frame to make sure
it worked.</p>

  <blockquote class="solution">
    <h2 id="solution-to-challenge-1">Solution to challenge 1</h2>

    <p>Let’s try this on the <code class="language-plaintext highlighter-rouge">pop</code> column of the <code class="language-plaintext highlighter-rouge">gapminder</code> dataset.</p>

    <p>Make a new column in the <code class="language-plaintext highlighter-rouge">gapminder</code> data frame that
contains population in units of millions of people.
Check the head or tail of the data frame to make sure
it worked.</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gapminder$pop_millions &lt;- gapminder$pop / 1e6
head(gapminder)
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      country year      pop continent lifeExp gdpPercap pop_millions
1 Afghanistan 1952  8425333      Asia  28.801  779.4453     8.425333
2 Afghanistan 1957  9240934      Asia  30.332  820.8530     9.240934
3 Afghanistan 1962 10267083      Asia  31.997  853.1007    10.267083
4 Afghanistan 1967 11537966      Asia  34.020  836.1971    11.537966
5 Afghanistan 1972 13079460      Asia  36.088  739.9811    13.079460
6 Afghanistan 1977 14880372      Asia  38.438  786.1134    14.880372
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="challenge-2">Challenge 2</h2>

  <p>On a single graph, plot population, in
millions, against year, for all countries. Don’t worry about
identifying which country is which.</p>

  <p>Repeat the exercise, graphing only for China, India, and
Indonesia. Again, don’t worry about which is which.</p>

  <blockquote class="solution">
    <h2 id="solution-to-challenge-2">Solution to challenge 2</h2>

    <p>Refresh your plotting skills by plotting population in millions against year.</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(gapminder, aes(x = year, y = pop_millions)) +
 geom_point()
</code></pre></div>    </div>

    <p><img src="../fig/rmd-09-ch2-sol-1.png" title="plot of chunk ch2-sol" alt="plot of chunk ch2-sol" style="display: block; margin: auto;" /></p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>countryset &lt;- c("China","India","Indonesia")
ggplot(gapminder[gapminder$country %in% countryset,],
       aes(x = year, y = pop_millions)) +
  geom_point()
</code></pre></div>    </div>

    <p><img src="../fig/rmd-09-ch2-sol-2.png" title="plot of chunk ch2-sol" alt="plot of chunk ch2-sol" style="display: block; margin: auto;" /></p>
  </blockquote>
</blockquote>

<p>Comparison operators, logical operators, and many functions are also
vectorized:</p>

<p><strong>Comparison operators</strong></p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x &gt; 2
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE FALSE  TRUE  TRUE
</code></pre></div></div>

<p><strong>Logical operators</strong></p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a &lt;- x &gt; 3  # or, for clarity, a &lt;- (x &gt; 3)
a
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] FALSE FALSE FALSE  TRUE
</code></pre></div></div>

<blockquote class="callout">
  <h2 id="tip-some-useful-functions-for-logical-vectors">Tip: some useful functions for logical vectors</h2>

  <p><code class="language-plaintext highlighter-rouge">any()</code> will return <code class="language-plaintext highlighter-rouge">TRUE</code> if <em>any</em> element of a vector is <code class="language-plaintext highlighter-rouge">TRUE</code>
<code class="language-plaintext highlighter-rouge">all()</code> will return <code class="language-plaintext highlighter-rouge">TRUE</code> if <em>all</em> elements of a vector are <code class="language-plaintext highlighter-rouge">TRUE</code></p>
</blockquote>

<p>Most functions also operate element-wise on vectors:</p>

<p><strong>Functions</strong></p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x &lt;- 1:4
log(x)
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 0.0000000 0.6931472 1.0986123 1.3862944
</code></pre></div></div>

<p>Vectorized operations work element-wise on matrices:</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>m &lt;- matrix(1:12, nrow=3, ncol=4)
m * -1
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     [,1] [,2] [,3] [,4]
[1,]   -1   -4   -7  -10
[2,]   -2   -5   -8  -11
[3,]   -3   -6   -9  -12
</code></pre></div></div>

<blockquote class="callout">
  <h2 id="tip-element-wise-vs-matrix-multiplication">Tip: element-wise vs. matrix multiplication</h2>

  <p>Very important: the operator <code class="language-plaintext highlighter-rouge">*</code> gives you element-wise multiplication!
To do matrix multiplication, we need to use the <code class="language-plaintext highlighter-rouge">%*%</code> operator:</p>

  <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>m %*% matrix(1, nrow=4, ncol=1)
</code></pre></div>  </div>

  <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     [,1]
[1,]   22
[2,]   26
[3,]   30
</code></pre></div>  </div>

  <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>matrix(1:4, nrow=1) %*% matrix(1:4, ncol=1)
</code></pre></div>  </div>

  <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     [,1]
[1,]   30
</code></pre></div>  </div>

  <p>For more on matrix algebra, see the <a href="http://www.statmethods.net/advstats/matrix.html">Quick-R reference
guide</a></p>
</blockquote>

<blockquote class="challenge">
  <h2 id="challenge-3">Challenge 3</h2>

  <p>Given the following matrix:</p>

  <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>m &lt;- matrix(1:12, nrow=3, ncol=4)
m
</code></pre></div>  </div>

  <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
</code></pre></div>  </div>

  <p>Write down what you think will happen when you run:</p>

  <ol>
    <li><code class="language-plaintext highlighter-rouge">m ^ -1</code></li>
    <li><code class="language-plaintext highlighter-rouge">m * c(1, 0, -1)</code></li>
    <li><code class="language-plaintext highlighter-rouge">m &gt; c(0, 20)</code></li>
    <li><code class="language-plaintext highlighter-rouge">m * c(1, 0, -1, 2)</code></li>
  </ol>

  <p>Did you get the output you expected? If not, ask a helper!</p>

  <blockquote class="solution">
    <h2 id="solution-to-challenge-3">Solution to challenge 3</h2>

    <p>Given the following matrix:</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>m &lt;- matrix(1:12, nrow=3, ncol=4)
m
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
</code></pre></div>    </div>

    <p>Write down what you think will happen when you run:</p>

    <ol>
      <li><code class="language-plaintext highlighter-rouge">m ^ -1</code></li>
    </ol>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>          [,1]      [,2]      [,3]       [,4]
[1,] 1.0000000 0.2500000 0.1428571 0.10000000
[2,] 0.5000000 0.2000000 0.1250000 0.09090909
[3,] 0.3333333 0.1666667 0.1111111 0.08333333
</code></pre></div>    </div>

    <ol>
      <li><code class="language-plaintext highlighter-rouge">m * c(1, 0, -1)</code></li>
    </ol>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    0    0    0    0
[3,]   -3   -6   -9  -12
</code></pre></div>    </div>

    <ol>
      <li><code class="language-plaintext highlighter-rouge">m &gt; c(0, 20)</code></li>
    </ol>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      [,1]  [,2]  [,3]  [,4]
[1,]  TRUE FALSE  TRUE FALSE
[2,] FALSE  TRUE FALSE  TRUE
[3,]  TRUE FALSE  TRUE FALSE
</code></pre></div>    </div>

  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="challenge-4">Challenge 4</h2>

  <p>We’re interested in looking at the sum of the
following sequence of fractions:</p>

  <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code> x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)
</code></pre></div>  </div>

  <p>This would be tedious to type out, and impossible for high values of
n.  Use vectorisation to compute x when n=100. What is the sum when
n=10,000?</p>

  <blockquote class="solution">
    <h2 id="challenge-4-1">Challenge 4</h2>

    <p>We’re interested in looking at the sum of the
following sequence of fractions:</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code> x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)
</code></pre></div>    </div>

    <p>This would be tedious to type out, and impossible for
high values of n.
Can you use vectorisation to compute x, when n=100?
How about when n=10,000?</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sum(1/(1:100)^2)
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 1.634984
</code></pre></div>    </div>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sum(1/(1:1e04)^2)
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 1.644834
</code></pre></div>    </div>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n &lt;- 10000
sum(1/(1:n)^2)
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 1.644834
</code></pre></div>    </div>

    <p>We can also obtain the same results using a function:</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>inverse_sum_of_squares &lt;- function(n) {
  sum(1/(1:n)^2)
}
inverse_sum_of_squares(100)
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 1.634984
</code></pre></div>    </div>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>inverse_sum_of_squares(10000)
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 1.644834
</code></pre></div>    </div>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n &lt;- 10000
inverse_sum_of_squares(n)
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1] 1.644834
</code></pre></div>    </div>

  </blockquote>
</blockquote>
:ET