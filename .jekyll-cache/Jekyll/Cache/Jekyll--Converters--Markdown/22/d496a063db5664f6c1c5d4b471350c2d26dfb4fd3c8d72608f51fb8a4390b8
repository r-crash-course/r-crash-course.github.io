I"ß/<h2 id="introduction">Introduction</h2>

<p>The scientific process is naturally incremental, and many projects
start life as random notes, some code, then a manuscript, and
eventually everything is a bit mixed together.</p>

<blockquote class="twitter-tweet"><p>Managing your projects in a reproducible fashion doesn't just make your science reproducible, it makes your life easier.</p>‚Äî Vince Buffalo (@vsbuffalo) <a href="https://twitter.com/vsbuffalo/status/323638476153167872">April 15, 2013</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Most people tend to organize their projects like this:</p>

<p><img src="../fig/bad_layout.png" alt="" /></p>

<p>There are many reasons why we should <em>ALWAYS</em> avoid this:</p>

<ol>
  <li>It is really hard to tell which version of your data is
the original and which is the modified;</li>
  <li>It gets really messy because it mixes files with various
extensions together;</li>
  <li>It probably takes you a lot of time to actually find
things, and relate the correct figures to the exact code
that has been used to generate it;</li>
</ol>

<p>A good project layout will ultimately make your life easier:</p>

<ul>
  <li>It will help ensure the integrity of your data;</li>
  <li>It makes it simpler to share your code with someone else
(a lab-mate, collaborator, or supervisor);</li>
  <li>It allows you to easily upload your code with your manuscript submission;</li>
  <li>It makes it easier to pick the project back up after a break.</li>
</ul>

<h2 id="a-possible-solution">A possible solution</h2>

<p>Fortunately, there are tools and packages which can help you manage your work effectively.</p>

<p>One of the most powerful and useful aspects of RStudio is its project management
functionality. We‚Äôll be using this today to create a self-contained, reproducible
project.</p>

<blockquote class="challenge">
  <h2 id="challenge-creating-a-self-contained-project">Challenge: Creating a self-contained project</h2>

  <p>We‚Äôre going to create a new project in RStudio:</p>

  <ol>
    <li>Click the ‚ÄúFile‚Äù menu button, then ‚ÄúNew Project‚Äù.</li>
    <li>Click ‚ÄúNew Directory‚Äù.</li>
    <li>Click ‚ÄúEmpty Project‚Äù.</li>
    <li>Type in the name of the directory to store your project, e.g. ‚Äúmy_project‚Äù.</li>
    <li>If available, select the check-box for ‚ÄúCreate a git repository.‚Äù</li>
    <li>Click the ‚ÄúCreate Project‚Äù button.</li>
  </ol>
</blockquote>

<p>Now when we start R in this project directory, or open this project with RStudio,
all of our work on this project will be entirely self-contained in this directory.</p>

<h2 id="best-practices-for-project-organization">Best practices for project organization</h2>

<p>Although there is no ‚Äúbest‚Äù way to lay out a project, there are some general
principles to adhere to that will make project management easier:</p>

<h3 id="treat-data-as-read-only">Treat data as read only</h3>

<p>This is probably the most important goal of setting up a project. Data is
typically time consuming and/or expensive to collect. Working with them
interactively (e.g., in Excel) where they can be modified means you are never
sure of where the data came from, or how it has been modified since collection.
It is therefore a good idea to treat your data as ‚Äúread-only‚Äù.</p>

<h3 id="data-cleaning">Data Cleaning</h3>

<p>In many cases your data will be ‚Äúdirty‚Äù: it will need significant pre-processing
to get into a format R (or any other programming language) will find useful. This
task is sometimes called ‚Äúdata munging‚Äù. I find it useful to store these scripts
in a separate folder, and create a second ‚Äúread-only‚Äù data folder to hold the
‚Äúcleaned‚Äù data sets.</p>

<h3 id="treat-generated-output-as-disposable">Treat generated output as disposable</h3>

<p>Anything generated by your scripts should be treated as disposable: it should
all be able to be regenerated from your scripts.</p>

<p>There are lots of different ways to manage this output. I find it useful to
have an output folder with different sub-directories for each separate
analysis. This makes it easier later, as many of my analyses are exploratory
and don‚Äôt end up being used in the final project, and some of the analyses
get shared between projects.</p>

<blockquote class="callout">
  <h2 id="tip-good-enough-practices-for-scientific-computing">Tip: Good Enough Practices for Scientific Computing</h2>

  <p><a href="https://github.com/swcarpentry/good-enough-practices-in-scientific-computing/blob/gh-pages/good-enough-practices-for-scientific-computing.pdf">Good Enough Practices for Scientific Computing</a> gives the following recommendations for project organization:</p>

  <ol>
    <li>Put each project in its own directory, which is named after the project.</li>
    <li>Put text documents associated with the project in the <code class="language-plaintext highlighter-rouge">doc</code> directory.</li>
    <li>Put raw data and metadata in the <code class="language-plaintext highlighter-rouge">data</code> directory, and files generated during cleanup and analysis in a <code class="language-plaintext highlighter-rouge">results</code> directory.</li>
    <li>Put source for the project‚Äôs scripts and programs in the <code class="language-plaintext highlighter-rouge">src</code> directory, and programs brought in from elsewhere or compiled locally in the <code class="language-plaintext highlighter-rouge">bin</code> directory.</li>
    <li>Name all files to reflect their content or function.</li>
  </ol>

</blockquote>

<blockquote class="callout">
  <h2 id="tip-projecttemplate---a-possible-solution">Tip: ProjectTemplate - a possible solution</h2>

  <p>One way to automate the management of projects is to install the third-party package, <code class="language-plaintext highlighter-rouge">ProjectTemplate</code>.
This package will set up an ideal directory structure for project management.
This is very useful as it enables you to have your analysis pipeline/workflow organized and structured.
Together with the default RStudio project functionality and Git you will be able to keep track of your
work as well as be able to share your work with collaborators.</p>

  <ol>
    <li>Install <code class="language-plaintext highlighter-rouge">ProjectTemplate</code>.</li>
    <li>Load the library</li>
    <li>Initialize the project:</li>
  </ol>

  <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>install.packages("ProjectTemplate")
library("ProjectTemplate")
create.project("../my_project", merge.strategy = "allow.non.conflict")
</code></pre></div>  </div>

  <p>For more information on ProjectTemplate and its functionality visit the
home page <a href="http://projecttemplate.net/index.html">ProjectTemplate</a></p>
</blockquote>

<h3 id="separate-function-definition-and-application">Separate function definition and application</h3>

<p>One of the more effective ways to work with R is to start by writing the code you want to run directly in an .R script, and then running the selected lines (either using the keyboard shortcuts in RStudio or clicking the ‚ÄúRun‚Äù button) in the interactive R console.</p>

<p>When your project is in its early stages, the initial .R script file usually contains many lines
of directly executed code. As it matures, reusable chunks get pulled into their
own functions. It‚Äôs a good idea to separate these functions into two separate folders; one
to store useful functions that you‚Äôll reuse across analyses and projects, and
one to store the analysis scripts.</p>

<blockquote class="callout">
  <h2 id="tip-avoiding-duplication">Tip: avoiding duplication</h2>

  <p>You may find yourself using data or analysis scripts across several projects.
Typically you want to avoid duplication to save space and avoid having to
make updates to code in multiple places.</p>

  <p>In this case I find it useful to make ‚Äúsymbolic links‚Äù, which are essentially
shortcuts to files somewhere else on a filesystem. On Linux and OS X you can
use the <code class="language-plaintext highlighter-rouge">ln -s</code> command, and on Windows you can either create a shortcut or
use the <code class="language-plaintext highlighter-rouge">mklink</code> command from the windows terminal.</p>
</blockquote>

<h3 id="save-the-data-in-the-data-directory">Save the data in the data directory</h3>

<p>Now we have a good directory structure we will now place/save the data file in the <code class="language-plaintext highlighter-rouge">data/</code> directory.</p>

<blockquote class="challenge">
  <h2 id="challenge-1">Challenge 1</h2>
  <p>Download the gapminder data from <a href="https://raw.githubusercontent.com/r-crash-course/r-crash-course.github.io/master/_episodes_rmd/data/gapminder-FiveYearData.csv">here</a>.</p>

  <ol>
    <li>Download the file (CTRL + S, right mouse click -&gt; ‚ÄúSave as‚Äù, or File -&gt; ‚ÄúSave page as‚Äù)</li>
    <li>Make sure it‚Äôs saved under the name <code class="language-plaintext highlighter-rouge">gapminder-FiveYearData.csv</code></li>
    <li>Save the file in the <code class="language-plaintext highlighter-rouge">data/</code> folder within your project.</li>
  </ol>

  <p>We will load and inspect these data later.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="challenge-2">Challenge 2</h2>
  <p>It is useful to get some general idea about the dataset, directly from the
command line, before loading it into R. Understanding the dataset better
will come in handy when making decisions on how to load it in R. Use the command-line
shell to answer the following questions:</p>
  <ol>
    <li>What is the size of the file?</li>
    <li>How many rows of data does it contain?</li>
    <li>What kinds of values are stored in this file?</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-to-challenge-2">Solution to Challenge 2</h2>

    <p>By running these commands in the shell:</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -lh data/gapminder-FiveYearData.csv
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-rw-rw-r-- 1 ai ai 80K april 16 21:16 data/gapminder-FiveYearData.csv
</code></pre></div>    </div>
    <p>The file size is 80K.</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wc -l data/gapminder-FiveYearData.csv
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1705 data/gapminder-FiveYearData.csv
</code></pre></div>    </div>
    <p>There are 1705 lines. The data looks like:</p>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>head data/gapminder-FiveYearData.csv
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>country,year,pop,continent,lifeExp,gdpPercap
Afghanistan,1952,8425333,Asia,28.801,779.4453145
Afghanistan,1957,9240934,Asia,30.332,820.8530296
Afghanistan,1962,10267083,Asia,31.997,853.10071
Afghanistan,1967,11537966,Asia,34.02,836.1971382
Afghanistan,1972,13079460,Asia,36.088,739.9811058
Afghanistan,1977,14880372,Asia,38.438,786.11336
Afghanistan,1982,12881816,Asia,39.854,978.0114388
Afghanistan,1987,13867957,Asia,40.822,852.3959448
Afghanistan,1992,16317921,Asia,41.674,649.3413952
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="callout">
  <h2 id="tip-command-line-in-r-studio">Tip: command line in R Studio</h2>

  <p>You can quickly open up a shell in RStudio using the <strong>Tools -&gt; Shell‚Ä¶</strong> menu item.</p>
</blockquote>

<h3 id="version-control">Version Control</h3>

<p>It is important to use version control with projects.  Go <a href="http://swcarpentry.github.io/git-novice/14-supplemental-rstudio/">here</a> for a good lesson which describes using Git with R Studio.</p>
:ET