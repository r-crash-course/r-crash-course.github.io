I"Ð<h2 id="saving-plots">Saving plots</h2>

<p>You have already seen how to save the most recent plot you create in <code class="language-plaintext highlighter-rouge">ggplot2</code>,
using the command <code class="language-plaintext highlighter-rouge">ggsave</code>. As a refresher:</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggsave("My_most_recent_plot.pdf")
</code></pre></div></div>

<p>You can save a plot from within RStudio using the â€˜Exportâ€™ button
in the â€˜Plotâ€™ window. This will give you the option of saving as a
.pdf or as .png, .jpg or other image formats.</p>

<p>Sometimes you will want to save plots without creating them in the
â€˜Plotâ€™ window first. Perhaps you want to make a pdf document with
multiple pages: each one a different plot, for example. Or perhaps
youâ€™re looping through multiple subsets of a file, plotting data from
each subset, and you want to save each plot, but obviously canâ€™t stop
the loop to click â€˜Exportâ€™ for each one.</p>

<p>In this case you can use a more flexible approach. The function
<code class="language-plaintext highlighter-rouge">pdf</code> creates a new pdf device. You can control the size and resolution
using the arguments to this function.</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdf("Life_Exp_vs_time.pdf", width=12, height=4)
ggplot(data=gapminder, aes(x=year, y=lifeExp, colour=country)) +
  geom_line() +
  theme(legend.position = "none")

# You then have to make sure to turn off the pdf device!

dev.off()
</code></pre></div></div>

<p>Open up this document and have a look.</p>

<blockquote class="challenge">
  <h2 id="challenge-1">Challenge 1</h2>

  <p>Rewrite your â€˜pdfâ€™ command to print a second
page in the pdf, showing a facet plot (hint: use <code class="language-plaintext highlighter-rouge">facet_grid</code>)
of the same data with one panel per continent.</p>
  <blockquote class="solution">
    <h2 id="solution-to-challenge-1">Solution to challenge 1</h2>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdf("Life_Exp_vs_time.pdf", width = 12, height = 4)

p &lt;- ggplot(data = gapminder, aes(x = year, y = lifeExp, colour = country)) +
  geom_line() +
  theme(legend.position = "none")

p + facet_grid(. ~continent)

dev.off()
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<p>The commands <code class="language-plaintext highlighter-rouge">jpeg</code>, <code class="language-plaintext highlighter-rouge">png</code> etc. are used similarly to produce
documents in different formats.</p>

<h2 id="writing-data">Writing data</h2>

<p>At some point, youâ€™ll also want to write out data from R.</p>

<p>We can use the <code class="language-plaintext highlighter-rouge">write.table</code> function for this, which is
very similar to <code class="language-plaintext highlighter-rouge">read.table</code> from before.</p>

<p>Letâ€™s create a data-cleaning script, for this analysis, we
only want to focus on the gapminder data for Australia:</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aust_subset &lt;- gapminder[gapminder$country == "Australia",]

write.table(aust_subset,
  file="cleaned-data/gapminder-aus.csv",
  sep=","
)
</code></pre></div></div>

<p>Letâ€™s switch back to the shell to take a look at the data to make sure it looks
OK:</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>head cleaned-data/gapminder-aus.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"country","year","pop","continent","lifeExp","gdpPercap"
"61","Australia",1952,8691212,"Oceania",69.12,10039.59564
"62","Australia",1957,9712569,"Oceania",70.33,10949.64959
"63","Australia",1962,10794968,"Oceania",70.93,12217.22686
"64","Australia",1967,11872264,"Oceania",71.1,14526.12465
"65","Australia",1972,13177000,"Oceania",71.93,16788.62948
"66","Australia",1977,14074100,"Oceania",73.49,18334.19751
"67","Australia",1982,15184200,"Oceania",74.74,19477.00928
"68","Australia",1987,16257249,"Oceania",76.32,21888.88903
"69","Australia",1992,17481977,"Oceania",77.56,23424.76683
</code></pre></div></div>

<p>Hmm, thatâ€™s not quite what we wanted. Where did all these
quotation marks come from? Also the row numbers are
meaningless.</p>

<p>Letâ€™s look at the help file to work out how to change this
behaviour.</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>?write.table
</code></pre></div></div>

<p>By default R will wrap character vectors with quotation marks
when writing out to file. It will also write out the row and
column names.</p>

<p>Letâ€™s fix this:</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>write.table(
  gapminder[gapminder$country == "Australia",],
  file="cleaned-data/gapminder-aus.csv",
  sep=",", quote=FALSE, row.names=FALSE
)
</code></pre></div></div>

<p>Now lets look at the data again using our shell skills:</p>

<div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>head cleaned-data/gapminder-aus.csv
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>country,year,pop,continent,lifeExp,gdpPercap
Australia,1952,8691212,Oceania,69.12,10039.59564
Australia,1957,9712569,Oceania,70.33,10949.64959
Australia,1962,10794968,Oceania,70.93,12217.22686
Australia,1967,11872264,Oceania,71.1,14526.12465
Australia,1972,13177000,Oceania,71.93,16788.62948
Australia,1977,14074100,Oceania,73.49,18334.19751
Australia,1982,15184200,Oceania,74.74,19477.00928
Australia,1987,16257249,Oceania,76.32,21888.88903
Australia,1992,17481977,Oceania,77.56,23424.76683
</code></pre></div></div>

<p>That looks better!</p>

<blockquote class="challenge">
  <h2 id="challenge-2">Challenge 2</h2>

  <p>Write a data-cleaning script file that subsets the gapminder
data to include only data points collected since 1990.</p>

  <p>Use this script to write out the new subset to a file
in the <code class="language-plaintext highlighter-rouge">cleaned-data/</code> directory.</p>
  <blockquote class="solution">
    <h2 id="solution-to-challenge-2">Solution to challenge 2</h2>

    <div class="language-plaintext r highlighter-rouge"><div class="highlight"><pre class="highlight"><code>write.table(
  gapminder[gapminder$year &gt; 1990, ],
  file = "cleaned-data/gapminder-after1990.csv",
  sep = ",", quote = FALSE, row.names = FALSE
)
</code></pre></div>    </div>
  </blockquote>
</blockquote>

:ET