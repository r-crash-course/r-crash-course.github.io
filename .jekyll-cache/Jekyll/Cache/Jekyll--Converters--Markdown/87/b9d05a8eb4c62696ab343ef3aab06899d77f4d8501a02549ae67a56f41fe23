I"~d<h2 id="reference">Reference</h2>

<h2 id="introduction-to-r-and-rstudio"><a href="../01-rstudio-intro/">Introduction to R and RStudio</a></h2>

<ul>
  <li>Use the escape key to cancel incomplete commands or running code
(Ctrl+C) if you’re using R from the shell.</li>
  <li>Basic arithmetic operations follow standard order of precedence:
    <ul>
      <li>Brackets: <code class="language-plaintext highlighter-rouge">(</code>, <code class="language-plaintext highlighter-rouge">)</code></li>
      <li>Exponents: <code class="language-plaintext highlighter-rouge">^</code> or <code class="language-plaintext highlighter-rouge">**</code></li>
      <li>Divide: <code class="language-plaintext highlighter-rouge">/</code></li>
      <li>Multiply: <code class="language-plaintext highlighter-rouge">*</code></li>
      <li>Add: <code class="language-plaintext highlighter-rouge">+</code></li>
      <li>Subtract: <code class="language-plaintext highlighter-rouge">-</code></li>
    </ul>
  </li>
  <li>Scientific notation is available, e.g: <code class="language-plaintext highlighter-rouge">2e-3</code></li>
  <li>Anything to the right of a <code class="language-plaintext highlighter-rouge">#</code> is a comment, R will ignore this!</li>
  <li>Functions are denoted by <code class="language-plaintext highlighter-rouge">function_name()</code>. Expressions inside the
brackets are evaluated before being passed to the function, and
functions can be nested.</li>
  <li>Mathematical functions: <code class="language-plaintext highlighter-rouge">exp</code>, <code class="language-plaintext highlighter-rouge">sin</code>, <code class="language-plaintext highlighter-rouge">log</code>, <code class="language-plaintext highlighter-rouge">log10</code>, <code class="language-plaintext highlighter-rouge">log2</code> etc.</li>
  <li>Comparison operators: <code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&lt;=</code>, <code class="language-plaintext highlighter-rouge">&gt;</code>, <code class="language-plaintext highlighter-rouge">&gt;=</code>, <code class="language-plaintext highlighter-rouge">==</code>, <code class="language-plaintext highlighter-rouge">!=</code></li>
  <li>Use <code class="language-plaintext highlighter-rouge">all.equal</code> to compare numbers!</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;-</code> is the assignment operator. Anything to the right is evaluate, then
stored in a variable named to the left.</li>
  <li><code class="language-plaintext highlighter-rouge">ls</code> lists all variables and functions you’ve created</li>
  <li><code class="language-plaintext highlighter-rouge">rm</code> can be used to remove them</li>
  <li>When assigning values to function arguments, you <em>must</em> use <code class="language-plaintext highlighter-rouge">=</code>.</li>
</ul>

<h2 id="project-management-with-rstudio"><a href="../02-project-intro/">Project management with RStudio</a></h2>

<ul>
  <li>To create a new project, go to File -&gt; New Project</li>
  <li>Install the <code class="language-plaintext highlighter-rouge">packrat</code> package to create self-contained projects</li>
  <li><code class="language-plaintext highlighter-rouge">install.packages</code> to install packages from CRAN</li>
  <li><code class="language-plaintext highlighter-rouge">library</code> to load a package into R</li>
  <li><code class="language-plaintext highlighter-rouge">packrat::status</code> to check whether all packages referenced in your
scripts have been installed.</li>
</ul>

<h2 id="seeking-help"><a href="../03-seeking-help/">Seeking help</a></h2>

<ul>
  <li>To access help for a function type <code class="language-plaintext highlighter-rouge">?function_name</code> or <code class="language-plaintext highlighter-rouge">help(function_name)</code></li>
  <li>Use quotes for special operators e.g. <code class="language-plaintext highlighter-rouge">?"+"</code></li>
  <li>Use fuzzy search if you can’t remember a name ‘??search_term’</li>
  <li><a href="http://cran.at.r-project.org/web/views">CRAN task views</a> are a good starting point.</li>
  <li><a href="http://stackoverflow.com/">Stack Overflow</a> is a good place to get help with your code.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">?dput</code> will dump data you are working from so others can load it easily.</li>
      <li><code class="language-plaintext highlighter-rouge">sessionInfo()</code> will give details of your setup that others may need for debugging.</li>
    </ul>
  </li>
</ul>

<h2 id="data-structures"><a href="../04-data-structures-part1/">Data structures</a></h2>

<p>Individual values in R must be one of 5 <strong>data types</strong>, multiple values can be grouped in <strong>data structures</strong>.</p>

<p><strong>Data types</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">typeof(object)</code> gives information about an items data type.</li>
  <li>There are 5 main data types:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">?numeric</code> real (decimal) numbers</li>
      <li><code class="language-plaintext highlighter-rouge">?integer</code> whole numbers only</li>
      <li><code class="language-plaintext highlighter-rouge">?character</code> text</li>
      <li><code class="language-plaintext highlighter-rouge">?complex</code> complex numbers</li>
      <li><code class="language-plaintext highlighter-rouge">?logical</code> TRUE or FALSE values</li>
    </ul>

    <p><strong>Special types:</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">?NA</code> missing values</li>
      <li><code class="language-plaintext highlighter-rouge">?NaN</code> “not a number” for undefined values (e.g. <code class="language-plaintext highlighter-rouge">0/0</code>).</li>
      <li><code class="language-plaintext highlighter-rouge">?Inf</code>, <code class="language-plaintext highlighter-rouge">-Inf</code> infinity.</li>
      <li><code class="language-plaintext highlighter-rouge">?NULL</code> a data structure that doesn’t exist</li>
    </ul>

    <p><code class="language-plaintext highlighter-rouge">NA</code> can occur in any atomic vector. <code class="language-plaintext highlighter-rouge">NaN</code>, and <code class="language-plaintext highlighter-rouge">Inf</code> can only
 occur in complex, integer or numeric type vectors. Atomic vectors
 are the building blocks for all other data structures. A <code class="language-plaintext highlighter-rouge">NULL</code> value
 will occur in place of an entire data structure (but can occur as list
 elements).</p>
  </li>
</ul>

<p><strong>Basic data structures in R:</strong></p>
<ul>
  <li>atomic <code class="language-plaintext highlighter-rouge">?vector</code> (can only contain one type)</li>
  <li><code class="language-plaintext highlighter-rouge">?list</code> (containers for other objects)</li>
  <li><code class="language-plaintext highlighter-rouge">?data.frame</code> two dimensional objects whose columns can contain different types of data</li>
  <li><code class="language-plaintext highlighter-rouge">?matrix</code> two dimensional objects that can contain only one type of data.</li>
  <li><code class="language-plaintext highlighter-rouge">?factor</code> vectors that contain predefined categorical data.</li>
  <li><code class="language-plaintext highlighter-rouge">?array</code> multi-dimensional objects that can only contain one type of data</li>
</ul>

<p>Remember that matrices are really atomic vectors underneath the hood, and that
data.frames are really lists underneath the hood (this explains some of the weirder
behaviour of R).</p>

<p><strong><a href="../04-data-structures-part1/">Vectors</a></strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">?vector()</code> All items in a vector must be the same type.</li>
  <li>Items can be converted from one type to another using <em>coercion</em>.</li>
  <li>The concatenate function ‘c()’ will append items to a vector.</li>
  <li><code class="language-plaintext highlighter-rouge">seq(from=0, to=1, by=1)</code> will create a sequence of numbers.</li>
  <li>Items in a vector can be named using the <code class="language-plaintext highlighter-rouge">names()</code> function.</li>
</ul>

<p><strong><a href="../04-data-structures-part1/">Factors</a></strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">?factor()</code> Factors are a data structure designed to store categorical data.</li>
  <li><code class="language-plaintext highlighter-rouge">levels()</code> shows the valid values that can be stored in a vector of type factor.</li>
</ul>

<p><strong><a href="../04-data-structures-part1/">Lists</a></strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">?list()</code> Lists are a data structure designed to store data of different types.</li>
</ul>

<p><strong><a href="../04-data-structures-part1/">Matrices</a></strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">?matrix()</code> Matrices are a data structure designed to store 2-dimensional data.</li>
</ul>

<p><strong><a href="../05-data-structures-part2/">Data Frames</a></strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">?data.frame</code> is a key data structure. It is a <code class="language-plaintext highlighter-rouge">list</code> of <code class="language-plaintext highlighter-rouge">vectors</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">cbind()</code> will add a column (vector) to a data.frame.</li>
  <li><code class="language-plaintext highlighter-rouge">rbind()</code> will add a row (list) to a data.frame.</li>
</ul>

<p><strong>Useful functions for querying data structures:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">?str</code> structure, prints out a summary of the whole data structure</li>
  <li><code class="language-plaintext highlighter-rouge">?typeof</code> tells you the type inside an atomic vector</li>
  <li><code class="language-plaintext highlighter-rouge">?class</code> what is the data structure?</li>
  <li><code class="language-plaintext highlighter-rouge">?head</code> print the first <code class="language-plaintext highlighter-rouge">n</code> elements (rows for two-dimensional objects)</li>
  <li><code class="language-plaintext highlighter-rouge">?tail</code> print the last <code class="language-plaintext highlighter-rouge">n</code> elements (rows for two-dimensional objects)</li>
  <li><code class="language-plaintext highlighter-rouge">?rownames</code>, <code class="language-plaintext highlighter-rouge">?colnames</code>, <code class="language-plaintext highlighter-rouge">?dimnames</code> retrieve or modify the row names
and column names of an object.</li>
  <li><code class="language-plaintext highlighter-rouge">?names</code> retrieve or modify the names of an atomic vector or list (or
columns of a data.frame).</li>
  <li><code class="language-plaintext highlighter-rouge">?length</code> get the number of elements in an atomic vector</li>
  <li><code class="language-plaintext highlighter-rouge">?nrow</code>, <code class="language-plaintext highlighter-rouge">?ncol</code>, <code class="language-plaintext highlighter-rouge">?dim</code> get the dimensions of a n-dimensional object
(Won’t work on atomic vectors or lists).</li>
</ul>

<h2 id="exploring-data-frames"><a href="../05-data-structures-part2/">Exploring Data Frames</a></h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">read.csv</code> to read in data in a regular structure
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sep</code> argument to specify the separator
        <ul>
          <li>”,” for comma separated</li>
          <li>“\t” for tab separated</li>
        </ul>
      </li>
      <li>Other arguments:
        <ul>
          <li><code class="language-plaintext highlighter-rouge">header=TRUE</code> if there is a header row</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="subsetting-data"><a href="../06-data-subsetting/">Subsetting data</a></h2>

<ul>
  <li>Elements can be accessed by:
    <ul>
      <li>Index</li>
      <li>Name</li>
      <li>Logical vectors</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">[</code> single square brackets:
    <ul>
      <li><em>extract</em> single elements or <em>subset</em> vectors</li>
      <li>e.g.<code class="language-plaintext highlighter-rouge">x[1]</code> extracts the first item from vector x.</li>
      <li><em>extract</em> single elements of a list. The returned value will be another <code class="language-plaintext highlighter-rouge">list()</code>.</li>
      <li><em>extract</em> columns from a data.frame</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">[</code> with two arguments to:
    <ul>
      <li><em>extract</em> rows and/or columns of
        <ul>
          <li>matrices</li>
          <li>data.frames</li>
          <li>e.g. <code class="language-plaintext highlighter-rouge">x[1,2]</code> will extract the value in row 1, column 2.</li>
          <li>e.g. <code class="language-plaintext highlighter-rouge">x[2,:]</code> will extract the entire second column of values.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">[[</code> double square brackets to extract items from lists.</li>
  <li><code class="language-plaintext highlighter-rouge">$</code> to access columns or list elements by name</li>
  <li>negative indices skip elements</li>
</ul>

<h2 id="control-flow"><a href="../07-control-flow/">Control flow</a></h2>

<ul>
  <li>Use <code class="language-plaintext highlighter-rouge">if</code> condition to start a conditional statement, <code class="language-plaintext highlighter-rouge">else if</code> condition to provide
additional tests, and <code class="language-plaintext highlighter-rouge">else</code> to provide a default</li>
  <li>The bodies of the branches of conditional statements must be indented.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">==</code> to test for equality.</li>
  <li><code class="language-plaintext highlighter-rouge">X &amp;&amp; Y</code> is only true if both X and Y are <code class="language-plaintext highlighter-rouge">TRUE</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">X || Y</code> is true if either X or Y, or both, are <code class="language-plaintext highlighter-rouge">TRUE</code>.</li>
  <li>Zero is considered <code class="language-plaintext highlighter-rouge">FALSE</code>; all other numbers are considered <code class="language-plaintext highlighter-rouge">TRUE</code></li>
  <li>Nest loops to operate on multi-dimensional data.</li>
</ul>

<h2 id="creating-publication-quality-graphics"><a href="../08-plot-ggplot2/">Creating publication quality graphics</a></h2>

<ul>
  <li>figures can be created with the grammar of graphics:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">library(ggplot2)</code></li>
      <li><code class="language-plaintext highlighter-rouge">ggplot</code> to create the base figure</li>
      <li><code class="language-plaintext highlighter-rouge">aes</code>thetics specify the data axes, shape, color, and data size</li>
      <li><code class="language-plaintext highlighter-rouge">geom</code>etry functions specify the type of plot, e.g. <code class="language-plaintext highlighter-rouge">point</code>, <code class="language-plaintext highlighter-rouge">line</code>, <code class="language-plaintext highlighter-rouge">density</code>, <code class="language-plaintext highlighter-rouge">box</code></li>
      <li><code class="language-plaintext highlighter-rouge">geom</code>etry functions also add statistical transforms, e.g. <code class="language-plaintext highlighter-rouge">geom_smooth</code></li>
      <li><code class="language-plaintext highlighter-rouge">scale</code> functions change the mapping from data to aesthetics</li>
      <li><code class="language-plaintext highlighter-rouge">facet</code> functions stratify the figure into panels</li>
      <li><code class="language-plaintext highlighter-rouge">aes</code>thetics apply to individual layers, or can be set for the whole plot
inside <code class="language-plaintext highlighter-rouge">ggplot</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">theme</code> functions change the overall look of the plot</li>
      <li>order of layers matters!</li>
      <li><code class="language-plaintext highlighter-rouge">ggsave</code> to save a figure.</li>
    </ul>
  </li>
</ul>

<h2 id="vectorization"><a href="../09-vectorization/">Vectorization</a></h2>

<ul>
  <li>Most functions and operations apply to each element of a vector</li>
  <li><code class="language-plaintext highlighter-rouge">*</code> applies element-wise to matrices</li>
  <li><code class="language-plaintext highlighter-rouge">%*%</code> for true matrix multiplication</li>
  <li><code class="language-plaintext highlighter-rouge">any()</code> will return <code class="language-plaintext highlighter-rouge">TRUE</code> if any element of a vector is <code class="language-plaintext highlighter-rouge">TRUE</code></li>
  <li><code class="language-plaintext highlighter-rouge">all()</code> will return <code class="language-plaintext highlighter-rouge">TRUE</code> if <em>all</em> elements of a vector are <code class="language-plaintext highlighter-rouge">TRUE</code></li>
</ul>

<h2 id="functions-explained"><a href="../10-functions/">Functions explained</a></h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">?"function"</code></li>
  <li>Put code whose parameters change frequently in a function, then call it with
different parameter values to customize its behavior.</li>
  <li>The last line of a function is returned, or you can use <code class="language-plaintext highlighter-rouge">return</code> explicitly</li>
  <li>Any code written in the body of the function will preferably look for variables defined inside the function.</li>
  <li>Document Why, then What, then lastly How (if the code isn’t self explanatory)</li>
</ul>

<h2 id="writing-data"><a href="../11-writing-data/">Writing data</a></h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">write.table</code> to write out objects in regular format</li>
  <li>set <code class="language-plaintext highlighter-rouge">quote=FALSE</code> so that text isn’t wrapped in <code class="language-plaintext highlighter-rouge">"</code> marks</li>
</ul>

<h2 id="split-apply-combine"><a href="../12-plyr/">Split-apply-combine</a></h2>

<ul>
  <li>Use the <code class="language-plaintext highlighter-rouge">xxply</code> family of functions to apply functions to groups within
some data.</li>
  <li>the first letter, <code class="language-plaintext highlighter-rouge">a</code>rray , <code class="language-plaintext highlighter-rouge">d</code>ata.frame or <code class="language-plaintext highlighter-rouge">l</code>ist corresponds to the input data</li>
  <li>the second letter denotes the output data structure</li>
  <li>Anonymous functions (those not assigned a name) are used inside the <code class="language-plaintext highlighter-rouge">plyr</code> family
of functions on groups within data.</li>
</ul>

<h2 id="dataframe-manipulation-with-dplyr"><a href="../13-dplyr/">Dataframe manipulation with dplyr</a></h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">library(dplyr)</code></li>
  <li><code class="language-plaintext highlighter-rouge">?select</code> to extract variables by name.</li>
  <li><code class="language-plaintext highlighter-rouge">?filter</code> return rows with matching conditions.</li>
  <li><code class="language-plaintext highlighter-rouge">?group_by</code> group data by one of more variables.</li>
  <li><code class="language-plaintext highlighter-rouge">?summarize</code> summarize multiple values to a single value.</li>
  <li><code class="language-plaintext highlighter-rouge">?mutate</code> add new variables to a data.frame.</li>
  <li>Combine operations using the <code class="language-plaintext highlighter-rouge">?"%&gt;%"</code> pipe operator.</li>
</ul>

<h2 id="dataframe-manipulation-with-tidyr"><a href="../14-tidyr/">Dataframe manipulation with tidyr</a></h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">library(tidyr)</code></li>
  <li>‘?gather’ convert data from <em>wide</em> to <em>long</em> format.</li>
  <li>‘?spread’ convert data from <em>long</em> to <em>wide</em> format.</li>
  <li>‘?separate’ split a single value into multiple values.</li>
  <li>‘?unite’ merge multiple values into a single value.</li>
</ul>

<h2 id="producing-reports-with-knitr"><a href="../15-knitr-markdown/">Producing reports with knitr</a></h2>
<ul>
  <li>Value of reproducible reports</li>
  <li>Basics of Markdown</li>
  <li>R code chunks</li>
  <li>Chunk options</li>
  <li>Inline R code</li>
  <li>Other output formats</li>
</ul>

<h2 id="best-practices-for-writing-good-code"><a href="../16-wrap-up/">Best practices for writing good code</a></h2>

<ul>
  <li>Program defensively, i.e., assume that errors are going to arise, and write code to detect them when they do.</li>
  <li>Write tests before writing code in order to help determine exactly what that code is supposed to do.</li>
  <li>Know what code is supposed to do before trying to debug it.</li>
  <li>Make it fail every time.</li>
  <li>Make it fail fast.</li>
  <li>Change one thing at a time, and for a reason.</li>
  <li>Keep track of what you’ve done.</li>
  <li>Be humble</li>
</ul>

<h2 id="glossary">Glossary</h2>

<dl>
  <dt id="argument">argument</dt>
  <dd>A value given to a function or program when it runs.
The term is often used interchangeably (and inconsistently) with <a href="#parameter">parameter</a>.</dd>
  <dt id="assign">assign</dt>
  <dd>To give a value a name by associating a variable with it.</dd>
  <dt id="body">body</dt>
  <dd>(of a function): the statements that are executed when a function runs.</dd>
  <dt id="comment">comment</dt>
  <dd>A remark in a program that is intended to help human readers understand what is going on,
but is ignored by the computer.
Comments in Python, R, and the Unix shell start with a <code class="language-plaintext highlighter-rouge">#</code> character and run to the end of the line;
comments in SQL start with <code class="language-plaintext highlighter-rouge">--</code>,
and other languages have other conventions.</dd>
  <dt id="comma-separated-values">comma-separated values</dt>
  <dd>(CSV) A common textual representation for tables
in which the values in each row are separated by commas.</dd>
  <dt id="delimiter">delimiter</dt>
  <dd>A character or characters used to separate individual values,
such as the commas between columns in a <a href="#comma-separated-values">CSV</a> file.</dd>
  <dt id="documentation">documentation</dt>
  <dd>Human-language text written to explain what software does,
how it works, or how to use it.</dd>
  <dt id="floating-point-number">floating-point number</dt>
  <dd>A number containing a fractional part and an exponent.
See also: <a href="#integer">integer</a>.</dd>
  <dt id="for-loop">for loop</dt>
  <dd>A loop that is executed once for each value in some kind of set, list, or range.
See also: <a href="#while-loop">while loop</a>.</dd>
  <dt id="index">index</dt>
  <dd>A subscript that specifies the location of a single value in a collection,
such as a single pixel in an image.</dd>
  <dt id="integer">integer</dt>
  <dd>A whole number, such as -12343. See also: <a href="#floating-point-number">floating-point number</a>.</dd>
  <dt id="library">library</dt>
  <dd>In R, the directory(ies) where <a href="#package">packages</a> are stored.</dd>
  <dt id="package">package</dt>
  <dd>A collection of R functions, data and compiled code in a well-defined format. Packages are stored in a <a href="#library">library</a> and loaded using the library() function.</dd>
  <dt id="parameter">parameter</dt>
  <dd>A variable named in the function’s declaration that is used to hold a value passed into the call.
The term is often used interchangeably (and inconsistently) with <a href="#argument">argument</a>.</dd>
  <dt id="return-statement">return statement</dt>
  <dd>A statement that causes a function to stop executing and return a value to its caller immediately.</dd>
  <dt id="sequence">sequence</dt>
  <dd>A collection of information that is presented in a specific order.</dd>
  <dt id="shape">shape</dt>
  <dd>An array’s dimensions, represented as a vector.
For example, a 5×3 array’s shape is <code class="language-plaintext highlighter-rouge">(5,3)</code>.</dd>
  <dt id="string">string</dt>
  <dd>Short for “character string”,
a <a href="#sequence">sequence</a> of zero or more characters.</dd>
  <dt id="syntax-error">syntax error</dt>
  <dd>A programming error that occurs when statements are in an order or contain characters
not expected by the programming language.</dd>
  <dt id="type">type</dt>
  <dd>The classification of something in a program (for example, the contents of a variable)
as a kind of number (e.g. <a href="#float">floating-point</a>, <a href="#integer">integer</a>), <a href="#string">string</a>,
or something else. In R the command typeof() is used to query a variables type.</dd>
  <dt id="while-loop">while loop</dt>
  <dd>A loop that keeps executing as long as some condition is true.
See also: <a href="#for-loop">for loop</a>.</dd>
</dl>
:ET